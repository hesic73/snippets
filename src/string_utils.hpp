#ifndef STRING_UTILS_H
#define STRING_UTILS_H

#include <functional>
#include <vector>
#include <optional>
#include <queue>
#include <cassert>
#include <unordered_map>

namespace hsc_snippets
{
    // Generated by GPT4
    std::vector<int> kmpSearch(const std::string &pat, const std::string &txt)
    {
        int M = pat.size();
        int N = txt.size();

        // Longest Prefix Suffix (lps) array
        std::vector<int> lps(M);
        std::vector<int> result;

        // Preprocess the pattern
        int len = 0;
        lps[0] = 0; // lps[0] is always 0
        int i = 1;
        while (i < M)
        {
            if (pat[i] == pat[len])
            {
                len++;
                lps[i] = len;
                i++;
            }
            else
            {
                if (len != 0)
                {
                    len = lps[len - 1];
                }
                else
                {
                    lps[i] = 0;
                    i++;
                }
            }
        }

        // Search the pattern in txt
        i = 0;     // index for txt[]
        int j = 0; // index for pat[]
        while (i < N)
        {
            if (pat[j] == txt[i])
            {
                j++;
                i++;
            }

            if (j == M)
            {
                result.push_back(i - j);
                j = lps[j - 1];
            }
            else if (i < N && pat[j] != txt[i])
            {
                if (j != 0)
                {
                    j = lps[j - 1];
                }
                else
                {
                    i = i + 1;
                }
            }
        }

        return result;
    }

}

#endif // STRING_UTILS_H